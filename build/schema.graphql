type AnyoneCallableUpdated @entity {
  id: ID!
  _status: Boolean! # bool
}

type CallerStatusUpdated @entity {
  id: ID!
  _caller: Bytes! # address
  _status: Boolean! # bool
}

type Transaction @entity {
  id: ID!
  from: Bytes
  to: Bytes
  timestamp: BigInt!
  gasLimit: BigInt
  gasPriceInGwei: BigInt
}

type Transfer @entity {
  id: ID!
  txnHash: Bytes!
  from: Bytes
  to: Bytes
  value: BigInt!
  setToken: SetToken!
  timestamp: BigInt!
}

# type FeeRecipientUpdated @entity {
#   id: ID!
#   _setToken: Bytes! # address
#   _newFeeRecipient: Bytes! # address
# }

# type IssueFeeUpdated @entity {
#   id: ID!
#   _setToken: Bytes! # address
#   _newIssueFee: BigInt! # uint256
# }

# type RedeemFeeUpdated @entity {
#   id: ID!
#   _setToken: Bytes! # address
#   _newRedeemFee: BigInt! # uint256
# }

type Issuer @entity {
  id: ID!
  address: Bytes!
  setTokensIssued: [TokenIssuance!]!
}

type TokenIssuance @entity {
  id: ID!
  buyerAddress: Bytes!
  setToken: SetToken!
  quantity: BigInt!
  fee: Fee!
  issuer: Issuer!
  transaction: Transaction!
}

type SetToken @entity {
  id: ID!
  address: Bytes!
  name: String!
  manager: Manager!
  issuer: Issuer!
  issuances: [TokenIssuance!]! @derivedFrom(field: "setToken")
  totalSupply: BigInt!
  rebalances: [Rebalance!]! @derivedFrom(field: "setToken")
  redemptions: [TokenRedemption!]! @derivedFrom(field: "setToken")
}

type Fee @entity {
  id: ID!
  timestamp: BigInt!
  manager: Manager!
  managerPayout: BigInt
  protocolPayout: BigInt
  transaction: Transaction!
}

type FlIRebalanceDetails @entity {
  id: ID!
  currentLeverageRatio: BigInt! # uint256
  newLeverageRatio: BigInt! # uint256
  chunkRebalanceNotional: BigInt! # uint256
  totalRebalanceNotional: BigInt! # uint256
}

type IndexTokenRebalance @entity {
  
}

type Rebalance @entity {
  id: ID!
  setToken: SetToken! @derivedFrom(field: "rebalances")
  rebalanceDetails: RebalanceDetails
  generalIndexTokenRebalanceDetails: 
  transaction: Transaction!
  transactionHash: Bytes!
}

type Manager @entity {
  id: ID!
  address: Bytes!
  feeAccrualHistory: [Fee!]! @derivedFrom(field: "manager")
  totalFees: BigInt
  setToken: SetToken!
}

type TokenRedemption @entity {
  id: ID!
  setToken: SetToken!
  redeemer: Bytes!
  transaction: Transaction!
  quantity: BigInt!
  fee: Fee!
}

type RipcordCalled @entity {
  id: ID!
  timestamp: BigInt!
  currentLeverageRatio: BigInt! # uint256
  newLeverageRatio: BigInt! # uint256
  rebalanceNotional: BigInt! # uint256
  etherIncentive: BigInt! # uint256
}

type StreamingFee @entity {
  id: ID!
  timestamp: BigInt!
  setToken: Bytes! # address indexed
  managerFee: BigInt # uint256
  protocolFee: BigInt # uint256
  newStreamingFee: BigInt # uint256
  newFeeRecipient: Bytes # address
}
