type AnyoneCallableUpdated @entity {
  id: ID!
  _status: Boolean! # bool
}

type CallerStatusUpdated @entity {
  id: ID!
  _caller: Bytes! # address
  _status: Boolean! # bool
}

type Transaction @entity {
  id: ID!
  from: Bytes!
  to: Bytes!
}

type Transfer @entity {
  id: ID!
  txnHash: Bytes!
  from: Bytes
  to: Bytes
  value: BigInt!
  setToken: SetToken! @derivedFrom(field: "transfers")
  timestamp: BigInt!
}

type FeeRecipientUpdated @entity {
  id: ID!
  _setToken: Bytes! # address
  _newFeeRecipient: Bytes! # address
}

type IssueFeeUpdated @entity {
  id: ID!
  _setToken: Bytes! # address
  _newIssueFee: BigInt! # uint256
}

type RedeemFeeUpdated @entity {
  id: ID!
  _setToken: Bytes! # address
  _newRedeemFee: BigInt! # uint256
}

type Component @entity {
  id: ID!
  name: String!
  address: Bytes!
  setToken: SetToken! @derivedFrom(field: "components")
  weight: BigInt!
}

type Issuer @entity {
  id: ID!
  address: Bytes!
  setTokensIssued: [SetToken]! @derivedFrom(field: "issuer")
}

type SetToken @entity {
  id: ID!
  address: Bytes!
  name: String!
  components: [Component]!
  transfers: [Transfer]!
  manager: Manager!
  currentSupply: BigInt!
  issuer: Issuer
}

type Fee @entity {
  id: ID!
  setToken: SetToken!
  timestamp: BigInt!
  managerPayout: BigInt
  protocolPayout: BigInt
}

type Manager @entity {
  id: ID!
  address: Bytes!
  feesAccrued: [Fee]!
}

type SetTokenIssued @entity {
  id: ID!
  setToken: SetToken! # address
  issuer: Issuer! # address
  purchaser: Bytes! # address
  _hookContract: Bytes! # address
  quantity: BigInt! # uint256
  manager: Manager
  protocolFee: BigInt! # uint256
}

type SetTokenRedeemed @entity {
  id: ID!
  _setToken: Bytes! # address
  _redeemer: Bytes! # address
  _to: Bytes! # address
  _quantity: BigInt! # uint256
  _managerFee: BigInt! # uint256
  _protocolFee: BigInt! # uint256
}

type Disengaged @entity {
  id: ID!
  timestamp: BigInt!
  currentLeverageRatio: BigInt! # uint256
  newLeverageRatio: BigInt! # uint256
  chunkRebalanceNotional: BigInt! # uint256
  totalRebalanceNotional: BigInt! # uint256
}

type Engaged @entity {
  id: ID!
  timestamp: BigInt!
  currentLeverageRatio: BigInt! # uint256
  newLeverageRatio: BigInt! # uint256
  chunkRebalanceNotional: BigInt! # uint256
  totalRebalanceNotional: BigInt! # uint256
}

type ExchangeAdded @entity {
  id: ID!
  _exchangeName: String! # string
  twapMaxTradeSize: BigInt! # uint256
  exchangeLastTradeTimestamp: BigInt! # uint256
  incentivizedTwapMaxTradeSize: BigInt! # uint256
  leverExchangeData: Bytes! # bytes
  deleverExchangeData: Bytes! # bytes
}

type ExchangeRemoved @entity {
  id: ID!
  _exchangeName: String! # string
}

type ExchangeUpdated @entity {
  id: ID!
  _exchangeName: String! # string
  twapMaxTradeSize: BigInt! # uint256
  exchangeLastTradeTimestamp: BigInt! # uint256
  incentivizedTwapMaxTradeSize: BigInt! # uint256
  leverExchangeData: Bytes! # bytes
  deleverExchangeData: Bytes! # bytes
}

type ExecutionSettingsUpdated @entity {
  id: ID!
  _unutilizedLeveragePercentage: BigInt! # uint256
  _twapMaxTradeSize: BigInt! # uint256
  _twapCooldownPeriod: BigInt! # uint256
  _slippageTolerance: BigInt! # uint256
  _exchangeName: String! # string
  _exchangeData: Bytes! # bytes
}

type IncentiveSettingsUpdated @entity {
  id: ID!
  _etherReward: BigInt! # uint256
  _incentivizedLeverageRatio: BigInt! # uint256
  _incentivizedSlippageTolerance: BigInt! # uint256
  _incentivizedTwapCooldownPeriod: BigInt! # uint256
  _incentivizedTwapMaxTradeSize: BigInt! # uint256
}

type MethodologySettingsUpdated @entity {
  id: ID!
  _targetLeverageRatio: BigInt! # uint256
  _minLeverageRatio: BigInt! # uint25
  _maxLeverageRatio: BigInt! # uint256
  _recenteringSpeed: BigInt! # uint256
  _rebalanceInterval: BigInt! # uint256
}

type RebalanceIterated @entity {
  id: ID!
  timestamp: BigInt!
  currentLeverageRatio: BigInt! # uint256
  newLeverageRatio: BigInt! # uint256
  chunkRebalanceNotional: BigInt! # uint256
  totalRebalanceNotional: BigInt! # uint256
}

type Rebalanced @entity {
  id: ID!
  timestamp: BigInt!
  currentLeverageRatio: BigInt! # uint256
  newLeverageRatio: BigInt! # uint256
  chunkRebalanceNotional: BigInt! # uint256
  totalRebalanceNotional: BigInt! # uint256
  gasUsed: BigInt!
  gasPriceInGwei: BigInt!
  transactionHash: Bytes!
}

type RipcordCalled @entity {
  id: ID!
  timestamp: BigInt!
  currentLeverageRatio: BigInt! # uint256
  newLeverageRatio: BigInt! # uint256
  rebalanceNotional: BigInt! # uint256
  etherIncentive: BigInt! # uint256
}

type StreamingFee @entity {
  id: ID!
  timestamp: BigInt!
  setToken: Bytes! # address indexed
  managerFee: BigInt # uint256
  protocolFee: BigInt # uint256
  newStreamingFee: BigInt # uint256
  newFeeRecipient: Bytes # address
}
